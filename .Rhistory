if (!is.character(pl)) {
stop("Invalid input: player should be a character vector", call. = FALSE)
} else if (!is.numeric(y)) {
stop("Invalid input: year should be a numeric vector", call. = FALSE)
} else if (!(pl %in% deliveries$batsman)) {
warning(paste0(pl, " not found! \n"), call. = FALSE)
} else if (!(y %in% deliveries$year)) {
warning(paste0(y, " not found! \n"), call. = FALSE)
} else {
avgs <- dplyr::full_join(avgs, avg_calc(pl, y),
by = c("batsman", "year", "player_runs", "player_wickets", "batting_avg"))
}
}
}
avgs <- avgs %>%
dplyr::filter(!is.na(batsman))
return(avgs)
}
expect_equal(df, bat_avg("V Kohli", 2016))
for (pl in players) {
for (y in years) {
if (!is.character(pl)) {
stop("Invalid input: player should be a character vector", call. = FALSE)
} else if (!is.numeric(y)) {
stop("Invalid input: year should be a numeric vector", call. = FALSE)
} else if (!(pl %in% deliveries$batsman)) {
warning(paste0(pl, " not found! \n"), call. = FALSE)
} else if (!(y %in% deliveries$year)) {
warning(paste0(y, " not found! \n"), call. = FALSE)
} else {
avgs <- dplyr::full_join(avgs, avg_calc(pl, y),
by = c("batsman", "year", "player_runs", "player_wickets", "batting_avg"))
}
}
}
#' # 2017, 2018, and 2019
#' bat_avg(c("V Kohli", "MS Dhoni", "RG Sharma"), c(2017, 2018, 2019))
#'
#'
#'
#'
#'
#'
#' @importFrom magrittr "%>%"
#' @export
bat_avg <- function(players, years) {
avg_calc <- function(player, yr){
deliveries %>%
dplyr::filter(batsman %in% player,
year %in% yr) %>%
dplyr::group_by(batsman, year) %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
player_wickets = length(unique(.$id[.$is_wicket == 1])),
batting_avg = round(player_runs/player_wickets, 2)
) %>%
dplyr::ungroup()
}
avgs <- data.frame(
batsman = NA,
year = NA,
player_runs = NaN,
player_wickets = NaN,
batting_avg = NaN
)
for (pl in players) {
for (y in years) {
if (!is.character(pl)) {
stop("Invalid input: player should be a character vector", call. = FALSE)
} else if (!is.numeric(y)) {
stop("Invalid input: year should be a numeric vector", call. = FALSE)
} else if (!(pl %in% deliveries$batsman)) {
warning(paste0(pl, " not found! \n"), call. = FALSE)
} else if (!(y %in% deliveries$year)) {
warning(paste0(y, " not found! \n"), call. = FALSE)
} else {
avgs <- dplyr::full_join(avgs, avg_calc(pl, y),
by = c("batsman", "year", "player_runs", "player_wickets", "batting_avg"))
}
}
}
avgs <- avgs %>%
dplyr::filter(!is.na(batsman))
return(avgs)
}
expect_equal(df, bat_avg("V Kohli", 2016))
df <- data.frame(
"batsman" = "V Kohli",
year = 2016,
player_runs = 973,
player_wickets = 12,
batting_avg = 81.08
)
expect_equal(df, bat_avg("V Kohli", 2016))
library(tidyverse)
library(readxl)
library(janitor)
options(dplyr.summarise.inform = FALSE)
ipl <- read.csv("IPL Matches 2008-2020.csv")
ipl <- ipl %>%
clean_names()
ipl <- ipl %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, date, year, city, player_of_match, venue, neutral_venue, team1, team2, toss_winner, toss_decision, winner, result, result_margin, eliminator, method, umpire1, umpire2)
deliveries <- read.csv("IPL Ball-by-Ball 2008-2020.csv")
deliveries <- ipl %>%
select(id, year, date) %>%
right_join(deliveries, by = c("id"))
class(deliveries$year)
deliveries <- ipl %>%
select(id, year, date) %>%
right_join(deliveries, by = c("id")) %>%
mutate(year = as.numeric(year))
deliveries <- ipl %>%
select(id, year, date) %>%
right_join(deliveries, by = c("id"))
deliveries <- deliveries %>%
mutate(year = as.numeric(year))
View(deliveries)
library(tidyverse)
library(readxl)
library(janitor)
options(dplyr.summarise.inform = FALSE)
ipl <- read.csv("IPL Matches 2008-2020.csv")
ipl <- ipl %>%
clean_names()
ipl <- ipl %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, date, year, city, player_of_match, venue, neutral_venue, team1, team2, toss_winner, toss_decision, winner, result, result_margin, eliminator, method, umpire1, umpire2)
deliveries <- read.csv("IPL Ball-by-Ball 2008-2020.csv")
deliveries <- ipl %>%
select(id, year, date) %>%
right_join(deliveries, by = c("id"))
View(deliveries)
deliveries <- deliveries %>%
mutate(year = as.numeric(year))
bat_avg <- function(players, years) {
avg_calc <- function(player, yr){
deliveries %>%
filter(batsman %in% player,
year %in% yr) %>%
group_by(batsman, year) %>%
summarise(
player_runs = sum(batsman_runs),
player_wickets = length(unique(.$id[.$is_wicket == 1])),
batting_ave = round(player_runs/player_wickets, 2)
) %>%
ungroup()
}
avgs <- data.frame(
batsman = NA,
year = NA,
player_runs = NA,
player_wickets = NA,
batting_ave = NA
)
for (pl in players) {
for (y in years) {
if (!is.character(pl)) {
stop("Invalid input: player should be a character vector", call. = FALSE)
} else if (!is.numeric(y)) {
stop("Invalid input: year should be a numeric vector", call. = FALSE)
} else if (!(pl %in% deliveries$batsman)) {
warning(paste0(pl, " not found! \n"), call. = FALSE)
} else if (!(y %in% deliveries$year)) {
warning(paste0(y, " not found! \n"), call. = FALSE)
} else {
avgs <- full_join(avgs, avg_calc(pl, y),
by = c("batsman", "year", "player_runs", "player_wickets", "batting_ave"))
}
}
}
avgs <- avgs %>%
filter(!is.na(batsman))
return(avgs)
}
bat_avg(c("V Kohli", "MS Dhoni", "RG Sharma", "AB de Villiers"), 2016:2019)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(year = as.numeric(year))
usethis::use_data(deliveries, overwrite = TRUE)
expect_equal(df, bat_avg("V Kohli", 2016))
df <- data.frame(
"batsman" = "V Kohli",
year = 2016,
player_runs = 973,
player_wickets = 12,
batting_avg = 81.08
)
df2 <- data.frame(
"batsman" = c("V Kohli","V Kohli", "MS Dhoni", "MS Dhoni"),
"year" = c(2016, 2017, 2016, 2017),
player_runs = c(973, 308, 284, 290),
player_wickets = c(12, 10, 8, 13),
batting_avg = c(81.08, 30.80, 35.50, 22.31)
)
expect_equal(df, bat_avg("V Kohli", 2016))
expect_equal(df2, bat_avg(c("V Kohli", "MS Dhoni"), 2016:2017))
test_that("arguments are appropriate", {
expect_error(bat_avg(Kohli, 2016))
expect_error("V Kohli", "2016")
})
teams
library(tidyverse)
library(testthat)
bat_max("MS Dhoni", 209)
bat_max("MS Dhoni", 2019)
bat_avg("MS Dhoni", 2019)
df <- tibble(
"batsman" = "MS Dhoni",
max_runs = 84
)
expect_equal(df, bat_max("MS Dhoni", 2019))
strike_rate("MS Dhoni", 2019)
strike_rate("MS Dhoni", 2019)
strike_rate("MS Dhoni", 2016)
library(tidyverse)
library(readxl)
library(janitor)
options(dplyr.summarise.inform = FALSE)
ipl <- read.csv("IPL Matches 2008-2020.csv")
ipl <- ipl %>%
clean_names()
ipl <- ipl %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, date, year, city, player_of_match, venue, neutral_venue, team1, team2, toss_winner, toss_decision, winner, result, result_margin, eliminator, method, umpire1, umpire2)
deliveries <- read.csv("IPL Ball-by-Ball 2008-2020.csv")
deliveries <- ipl %>%
select(id, year, date) %>%
right_join(deliveries, by = c("id"))
deliveries <- deliveries %>%
mutate(year = as.numeric(year))
strike_rate <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
balls_faced <- function(player, yr) {
deliveries %>%
filter(batsman == player,
year == yr,
extras_type != "wides" | is.na(extras_type)) %>%
nrow()
}
deliveries %>%
filter(
batsman == player,
year == yr) %>%
group_by(batsman) %>%
summarise(
strike_rate = round(100*sum(batsman_runs)/balls_faced(player, yr), 2)
)
}
}
strike_rate("MS Dhoni", 2016)
strike_rate("MS Dhoni", 2019)
df <- data.frame(
batsman = "MS Dhoni",
strike_rate = 134.63
)
expect_equal(df, strike_rate("MS Dhoni", 2019))
df <- tibble(
batsman = "MS Dhoni",
strike_rate = 134.63
)
expect_equal(df, strike_rate("MS Dhoni", 2019))
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (centuries*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
df <- tibble(
batsman = "V Kohli",
centuries = 4,
half_centuries = 7
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
library(ipl)
library(tidyverse)
library(testthat)
df <- tibble(
batsman = "V Kohli",
centuries = 4,
half_centuries = 7
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
library(ipl)
df <- tibble(
batsman = "V Kohli",
centuries = 4,
half_centuries = 7
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
cents_halfcents("V Kohli", 2016)
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::summarise(
batsman = batsman
centuries = sum(cents),
half_centuries = sum(half_cents)
)
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::summarise(
batsman = batsman,
centuries = sum(cents),
half_centuries = sum(half_cents)
)
#' # Calculate the number of centuries and half-centuries made by Virat Kohli
#' # in the 2016 IPL season
#'
#' cents_halfcents("V Kohli", 2016)
#'
#'
#'
#'@importFrom magrittr "%>%"
#' @export
#'
cents_halfcents <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::summarise(
batsman = batsman,
centuries = sum(cents),
half_centuries = sum(half_cents)
)
}
}
cents_halfcents("V Kohli", 2016)
#' # Calculate the number of centuries and half-centuries made by Virat Kohli
#' # in the 2016 IPL season
#'
#' cents_halfcents("V Kohli", 2016)
#'
#'
#'
#'@importFrom magrittr "%>%"
#' @export
#'
cents_halfcents <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
}
}
cents_halfcents("V Kohli", 2016)
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
#' # Calculate the number of centuries and half-centuries made by Virat Kohli
#' # in the 2016 IPL season
#'
#' cents_halfcents("V Kohli", 2016)
#'
#'
#'
#'@importFrom magrittr "%>%"
#' @export
#'
cents_halfcents <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(
batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
}
}
cents_halfcents("V Kohli", 2016)
library(ipl)
df <- tibble(
batsman = "V Kohli",
centuries = 4,
half_centuries = 7
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
library(ipl)
library(ipl)
