batsman == player,
year == yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
}
}
cents_halfcents("V Kohli", 2016)
library(ipl)
df <- tibble(
batsman = "V Kohli",
centuries = 4,
half_centuries = 7
)
expect_equal(df, cents_halfcents("V Kohli", 2016))
library(ipl)
library(ipl)
library(ipl)
library(ipl)
library(testthat)
df <- tibble(
"batsman" = "MS Dhoni",
max_runs = 84
)
library(tidyverse)
library(testthat)
df <- tibble(
"batsman" = "MS Dhoni",
max_runs = 84
)
test_that({
expect_identical(df, bat_max("MS Dhoni", 2019))
})
library(ipl)
library(ipl)
library(ipl)
class(deliveries)
class(teams)
winning_team <- function(teams, yr){
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs*6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(n_overs - 1, ".", 6 + diff)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c("id", "year", "date", "batting_team"))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA)
for (i in 1:nrow(team_runs)){
if (team_runs$date[i] %in% dates){
team_runs$winning_team[i] = "No Result"
df <- full_join(df, team_runs[i, ],
by = c("id", "year", "date", "batting_team", "match_runs", "n_overs", "winning_team"))
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i+1]) {
team_runs$winning_team[i] = team_runs$batting_team[i+1]
team_runs$winning_team[i+1] = team_runs$batting_team[i+1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i+1]){
team_runs$winning_team[i] = team_runs$batting_team[i]
team_runs$winning_team[i+1] = team_runs$batting_team[i]
} else {
team_runs$winning_team[i] = "Draw"
team_runs$winning_team[i+1] = "Draw"
}
}
team_runs <- team_runs %>%
rbind(df) %>%
filter(!is.na(id)) %>%
arrange(date)
return(team_runs)
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
library(tidyverse)
team_overs <- deliveries %>%
filter(batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs*6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(n_overs - 1, ".", 6 + diff)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
## Ball-by-ball information of IPL matches in 2008 - 2020
library(tidyverse)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(year = as.numeric(year))
usethis::use_data(deliveries, overwrite = TRUE)
## Creating function to create teams data set
winning_team <- function(teams, yr){
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs*6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(n_overs - 1, ".", 6 + diff)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c("id", "year", "date", "batting_team"))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA)
for (i in 1:nrow(team_runs)){
if (team_runs$date[i] %in% dates){
team_runs$winning_team[i] = "No Result"
df <- full_join(df, team_runs[i, ],
by = c("id", "year", "date", "batting_team", "match_runs", "n_overs", "winning_team"))
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i+1]) {
team_runs$winning_team[i] = team_runs$batting_team[i+1]
team_runs$winning_team[i+1] = team_runs$batting_team[i+1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i+1]){
team_runs$winning_team[i] = team_runs$batting_team[i]
team_runs$winning_team[i+1] = team_runs$batting_team[i]
} else {
team_runs$winning_team[i] = "Draw"
team_runs$winning_team[i+1] = "Draw"
}
}
team_runs <- team_runs %>%
rbind(df) %>%
filter(!is.na(id)) %>%
arrange(date)
return(team_runs)
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
library(ipl)
class(teams)
deliveries %>%
filter(batsman == "V Kohli")
deliveries %>%
filter(batsman == "V Kohli")
#'
#'
#'
#'
#'
#'
#'@importFrom magrittr "%>%"
#'
#' @export
#'
strike_rate <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
balls_faced <- function(player, yr) {
deliveries %>%
dplyr::filter(batsman %in% player,
year %in% yr,
extras_type != "wides" | is.na(extras_type)) %>%
nrow()
}
deliveries %>%
dplyr::filter(
batsman == player,
year == yr) %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(
strike_rate = round(100*sum(batsman_runs)/balls_faced(player, yr), 2)
)
}
}
#' # Calculate the number of centuries and half-centuries made by Virat Kohli
#' # in the 2016 IPL season
#'
#' cents_halfcents("V Kohli", 2016)
#'
#'
#'
#'@importFrom magrittr "%>%"
#' @export
#'
cents_halfcents <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(
batsman %in% player,
year %in% yr
) %>%
dplyr::group_by(id, batsman) %>%
dplyr::distinct() %>%
dplyr::summarise(
player_runs = sum(batsman_runs),
cents = player_runs %/% 100,
half_cents = (player_runs - (cents*100)) %/% 50
) %>%
dplyr::ungroup() %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(
centuries = sum(cents),
half_centuries = sum(half_cents)
)
}
}
#'
#'
#'
#'
#'
#'
#'
#'@importFrom magrittr "%>%"
#'
#' @export
bat_max <- function(player, yr) {
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(batsman %in% player,
year %in% yr) %>%
dplyr::group_by(id, batsman) %>%
dplyr::summarise(match_runs = sum(batsman_runs)) %>%
dplyr::ungroup() %>%
dplyr::group_by(batsman) %>%
dplyr::summarise(max_runs = max(match_runs))
}
}
library(ipl)
View(teams)
bat_avg(c("MS Dhoni", "Kohli"), 2016)
bat_avg(c("MS Dhoni", "Kohli"), c(2016, 200))
utils::globalVariables(
c("deliveries", "batsman", "year", "batsman_runs", ".", "player_runs",
"player_wickets", "id", "match_runs", "cents", "half_cents", "extras_type")
)
## Ball-by-ball information of IPL matches in 2008 - 2020
library(tidyverse)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(year = as.numeric(year))
usethis::use_data(deliveries, overwrite = TRUE)
## Creating function to create teams data set
winning_team <- function(teams, yr){
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs*6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(n_overs - 1, ".",
6 + diff)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c("id", "year", "date",
"batting_team"))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA)
for (i in 1:nrow(team_runs)){
if (team_runs$date[i] %in% dates){
team_runs$winning_team[i] = "No Result"
df <- full_join(df, team_runs[i, ],
by = c("id", "year", "date", "batting_team", "match_runs",
"n_overs", "winning_team"))
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i+1]) {
team_runs$winning_team[i] = team_runs$batting_team[i+1]
team_runs$winning_team[i+1] = team_runs$batting_team[i+1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i+1]){
team_runs$winning_team[i] = team_runs$batting_team[i]
team_runs$winning_team[i+1] = team_runs$batting_team[i]
} else {
team_runs$winning_team[i] = "Draw"
team_runs$winning_team[i+1] = "Draw"
}
}
team_runs <- team_runs %>%
rbind(df) %>%
filter(!is.na(id)) %>%
arrange(date)
return(team_runs)
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
library(ipl)
library(ipl)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(ipl)
library(readxl)
bowlers <- read_excel("~/Desktop/Top_100_bowlers.xlsx")
View(bowlers)
View(bowlers)
## Clean the Bowlers data
bowlers <- read_csv("data-raw/bowlers.csv")
library(tidyverse)
## Clean the Bowlers data
bowlers <- read_csv("data-raw/bowlers.csv")
bowlers$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", bowlers$PLAYER))
bowlers %>%
janitor::clean_names()
bowler_score("Rahul Sharma")
cents_halfcents("V Kohli", 2016)
expect_equal(154.4, overs("Rahul Sharma"))
expect_equal(154.4, overs("Rahul Sharma"))
context("overs")
library(tibble)
library(dplyr)
library(dplyr)
load("/Volumes/GoogleDrive/My Drive/Smith College/Senior Year/ipl/data/bowlers.rda")
bowlers
source('/Volumes/GoogleDrive/My Drive/Smith College/Senior Year/ipl/tests/testthat/test_bowler_summary.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/Smith College/Senior Year/ipl/tests/testthat/test_bowler_summary.R', echo=TRUE)
