stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision = NA,
wins = NaN,
losses = NaN,
wpct = NaN
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision,
wins,
losses,
wpct
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision = NA,
wins = NaN,
losses = NaN,
wpct = NaN
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
bat_max <- function(player, yr) {
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
filter(
batsman %in% player,
year %in% yr
) %>%
group_by(id, batsman) %>%
summarise(match_runs = sum(batsman_runs)) %>%
ungroup() %>%
group_by(batsman) %>%
summarise(max_runs = max(match_runs))
}
}
bat_max("Suresh Raina", 2017)
bat_max <- function(player, yr) {
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
filter(
batsman %in% player,
year %in% yr
) %>%
group_by(id, batsman) %>%
summarise(match_runs = sum(batsman_runs)) %>%
ungroup() %>%
group_by(batsman) %>%
summarise(max_runs = max(match_runs))
}
}
bat_max("Suresh Raina", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
typeof(winloss)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
typeof(winloss)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year")
} else if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss("Sunrisers Hyderabad", 2017)
expect_length(winloss("Sunrisers Hyderabad", 2017), 16)
winloss("Sunrisers Hyderabad", 2017)
expect_length(winloss("Sunrisers Hyderabad", 2017), 4)
stop("Invalid input: team name input should be a character vector")
stop("Invalid input: player input should be a character vector")
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- function(player){
batsman$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", batsman$PLAYER))
'%!in%' <- Negate(`%in%`)
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- batsman %>%
select(PLAYER, `4s`)%>%
dplyr::filter(PLAYER == player)
return(fours[1, 2])
}
fours <- function(player){
batsman$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", batsman$PLAYER))
'%!in%' <- Negate(`%in%`)
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- batsman %>%
select(PLAYER, `4s`)%>%
dplyr::filter(PLAYER == player)
return(fours[1, 2])
}
fours("Suresh Raina")
test_that("check fours", {
expect_length(fours("Suresh Raina"), 1)
})
test_that("check for invalid input types", {
expect_error(
fours(00),
regexp = "be a character"
)})
test_that("check for when data not found", {
expect_error(
fours("Suresh"),
regexp = "not found"
)})
test_that("check fours", {
expect_length(fours("Suresh Raina"), 1)
})
test_that("check for invalid input types", {
expect_error(
fours(00),
regexp = "be a character"
)})
test_that("check for when data not found", {
expect_error(
fours("Suresh"),
regexp = "Invalid player name"
)})
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
toss_decision_tbl <- IPL_matches %>%
dplyr::filter(
toss_winner == team_name
) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision_tbl)
}
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 4)
})
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
toss_decision_tbl <- IPL_matches %>%
dplyr::filter(
toss_winner == team_name
) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision_tbl)
}
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 4)
})
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 2)
})
test_that("check for invalid input types", {
expect_error(
toss_choice(00),
regexp = "be a character"
)
})
test_that("check for when data not found", {
expect_error(
toss_choice("Dehli"),
regexp = "Invalid team name"
)
})
git checkout -b Swaha294-main main
git checkout -b Swaha294-main main
git pull https://github.com/Swaha294/ipl.git main
