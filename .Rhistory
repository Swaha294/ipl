overs = ipl::overs(player_name)
#maiden overs naming
firstname_letter <- substr(stringr::word(player_name, 1), 1, 1)
surname <- stringr::word(player_name, 2)
player_name_MO <- paste(firstname_letter, surname)
maiden_overs <- ipl::maiden_overs(player_name_MO)
runs <- ipl::runs(player_name)
wickets_taken <- ipl::wickets_taken(player_name)
bowling_analysis <- paste(overs, "-", maiden_overs, "-",runs, "-", wickets_taken)
bowler <- player_name
output_df <- data.frame(bowler, overs, maiden_overs, runs, wickets_taken, bowling_analysis)
return(output_df)
}
bowling_analysis("Rahul Sharma")
#' @examples
#'
#' library(ipl)
#'
#' # Summarises the bowling analysis for Rahul Sharma
#' bowling_analysis("Rahul Sharma")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
bowling_analysis <- function(player_name) {
overs = ipl::overs(player_name)
#maiden overs naming
firstname_letter <- substr(stringr::word(player_name, 1), 1, 1)
surname <- stringr::word(player_name, 2)
player_name_MO <- paste(firstname_letter, surname)
maiden_overs <- ipl::maiden_overs(player_name_MO)
runs <- ipl::runs(player_name)
wickets_taken <- ipl::wickets_taken(player_name)
bowling_analysis <- paste0(overs, "-", maiden_overs, "-",runs, "-", wickets_taken)
bowler <- player_name
output_df <- data.frame(bowler, overs, maiden_overs, runs, wickets_taken, bowling_analysis)
return(output_df)
}
bowling_analysis("Rahul Sharma")
library(ipl)
library(ipl)
batsman_summary("V Kohli")
test_that("check for invalid input", {
expect_error(batsman_summary(99),
regexp = "should be a character")
})
length(batsman_summary("V Kohli"))
styler:::style_selection()
library(ipl)
bowler_summary()
test_that("check bowler summary", {
expect_identical(df, bowler_summary())
})
df <- data.frame(
"statistic" = c("Most Overs", "Most Runs", "Most Wickets", "Most Matches", "Most Innings"),
"bowler" = c("Harbhajan Singh", "Piyush Chawla", "Lasith Malinga", "Suresh Raina", "Harbhajan Singh"),
"value" = c(562.2, 4072.0, 170.0, 193.0, 157.0)
)
test_that("check bowler summary", {
expect_identical(df, bowler_summary())
})
library(ipl)
library(ipl)
View(deliveries)
bowling_analysis("Rahul Sharma")
library(ipl)
deliveries %>% filter(str_detect(bowler, "Sharma"))
library(stringr)
library(dplyr)
deliveries %>% filter(str_detect(bowler, "Sharma"))
deliveries %>% filter(str_detect(bowler, "Sharma")) %>% unique(bowler)
deliveries %>% filter(str_detect(bowler, "Sharma")) %>% select(bowler) %>% distinct()
df <- data.frame(
"bowler" = "Rahul Sharma",
"overs" = 154.4,
"runs" = 1086,
"wickets_taken" = 40
)
batsman_summary <- function(player) {
if (!(is.character(player))) {
stop(paste0("Invalid input: ", player, " should be a character vector"), call. = FALSE)
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(player, " not found!"), call. = FALSE)
} else {
ipl::bat_avg(player, 2008:2020) %>%
left_join(map2_df(player, 2008:2020, ipl::bat_max), by = c("batsman", "year")) %>%
left_join(map2_df(player, 2008:2020, ipl::strike_rate), by = c("batsman", "year")) %>%
left_join(map2_df(player, 2008:2020, ipl::cents_halfcents), by = c("batsman", "year")) %>%
left_join(map2_df(player, 2008:2020, ipl::fours), by = c("batsman", "year")) %>%
left_join(map2_df(player, 2008:2020, ipl::sixes), by = c("batsman", "year")) %>%
select(-batsman) %>%
arrange(desc(year))
}
}
test_that("check bowling analysis", {
expect_identical(df, bowling_analysis("Rahul Sharma"))
})
test_that("check for when data not found", {
expect_error(bowling_analysis("Sharma"),regexp = "input another name")
expect_error(bowling_analysis("Rahul"),regexp = "input another name")
})
bowling_analysis("Rahul Sharma")
#' library(ipl)
#'
#' # Summarises the bowling analysis for Rahul Sharma
#' bowling_analysis("Rahul Sharma")
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @importFrom stringr word
#'
#' @export
#'
bowling_analysis <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% bowlers_100$player)) {
stop("Invalid player name, please input another name")
}
#maiden overs naming
firstname_letter <- substr(word(player_name, 1), 1, 1)
surname <- word(player_name, 2)
player_name_MO <- paste(firstname_letter, surname)
overs <- ipl::overs(player_name)
runs <- ipl::runs(player_name)
wickets_taken <- ipl::wickets_taken(player_name)
bowler <- player_name
output_df <- data.frame(bowler, overs, runs, wickets_taken)
return(output_df)
}
test_that("check bowling analysis", {
expect_identical(df, bowling_analysis("Rahul Sharma"))
})
library(ipl)
library(ipl)
styler:::style_selection()
library(ipl)
test_that("calculate maiden overs", {
expect_equal(2, maiden_overs("R Sharma"))
expect_equal(3, maiden_overs("S Kaul"))
})
maiden_overs("R Sharma")
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$player)) {
stop("Invalid player name, please input another name. Make sure the player `Rahul Sharma ` is denoted as `R Sharma`.")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
return(maiden_over)
}
}
test_that("calculate maiden overs", {
expect_equal(2, maiden_overs("R Sharma"))
expect_equal(3, maiden_overs("S Kaul"))
})
maiden_overs("R Sharma")
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$batsman)) {
stop("Player not found")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
return(maiden_over)
}
}
test_that("calculate maiden overs", {
expect_equal(2, maiden_overs("R Sharma"))
expect_equal(3, maiden_overs("S Kaul"))
})
maiden_overs("Rahul Sharma")
maiden_overs("R Sharma")
source("~/Documents/Mithi/Smith/Spring 2022/SDS 270/Div II/ipl/R/maiden_overs.R", echo=TRUE)
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$batsman)) {
stop("Player not found")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
#return(maiden_over)
}
}
maiden_overs("R Sharma")
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$batsman)) {
stop("Player not found")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
}
return(maiden_over)
}
maiden_overs("R Sharma")
maiden_overs("R Sharma")
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$batsman)) {
stop("Player not found")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
return(maiden_over)
}
return(maiden_over)
}
maiden_overs("R Sharma")
#'
#' library(ipl)
#'
#' # Calculates the maiden overs for Rahul Sharma
#' maiden_overs("Harbhajan Singh")
#' @importFrom magrittr "%>%"
#' @import dplyr
#'
#' @export
#'
maiden_overs <- function(player_name) {
if (!is.character(player_name)) {
stop(paste0("Invalid input: ", player_name, " must be a character"))
}
if (!(player_name %in% deliveries$batsman)) {
stop("Player not found")
if (!(player_name %in% deliveries$batsman)) {
stop("Invalid player name, please input another name.")
}
maiden_overs_df <- deliveries %>%
select(id, ball, batsman, bowler, batsman_runs) %>%
filter(batsman_runs == 0, bowler == player_name)
ballcount <- 1
maiden_over <- 0
for (ballnum in maiden_overs_df$ball) {
if (ballcount == ballnum) {
ballcount <- ballcount + 1
if (ballcount == 6) {
maiden_over <- maiden_over + 1
}
} else {
ballcount <- 1
}
}
return(maiden_over)
}
return(maiden_over)
}
maiden_overs("R Sharma")
deliveries %>% filter(batsman_runs == 0, extras_type %in% c("byes", "legbyes") | is.na(extras_type)) %>% group_by(over) %>% summarise(n = n())
library(lobstr)
obj_size(deliveries)
library(tidyverse)
obj_size(bat_avg)
obj_size(bat_max)
obj_size(batsman_summary())
obj_size(batsman_summary)
obj_size(bowler_score)
obj_size(bowler_summary)
obj_size(cents_halfcents)
obj_size(fours)
obj_size(sixes)
obj_size(overs_balls())
obj_size(overs_balls)
obj_size(overs)
obj_size(partnership_runs)
obj_size(runs)
obj_size(strike_rate)
obj_size(toss_choice)
obj_size(wickets_taken)
obj_size(winloss)
head(unique(deliveries$id))
deliveries %>% filter(id == 335984) %>% select(year, batting_team, bowling_team)
styler:::style_selection()
styler:::style_selection()
rlang::last_error()
library(ipl)
library(ipl)
library(ipl)
library(dplyr)
library(ggplot2)
bat_avg(c("KL Rahul", "RG Sharma"), 2008:2020)
bat_avg(c("KL Rahul", "RG Sharma"), 2013:2020)
bat_avg(c("KL Rahul", "RG Sharma"), 2013:2020) %>%
ggplot(aes(year, batting_avg, color = batsman)) +
geom_line()
bat_avg(c("KL Rahul", "RG Sharma", "MS Dhoni"), 2013:2020) %>%
ggplot(aes(year, batting_avg, color = batsman)) +
geom_line()
bat_avg(c("KL Rahul", "RG Sharma", "MS Dhoni", "V Kohli"), 2013:2020) %>%
ggplot(aes(year, batting_avg, color = batsman)) +
geom_line()
bat_avg(c("KL Rahul", "RG Sharma", V Kohli"), 2013:2020) %>%
bat_avg(c("KL Rahul", "RG Sharma", V Kohli"), 2013:2020) %>%
bat_avg(c("KL Rahul", "RG Sharma", "V Kohli"), 2013:2020) %>%
ggplot(aes(year, batting_avg, color = batsman)) +
geom_line()
bat_avg(c("KL Rahul", "RG Sharma", "V Kohli"), 2013:2020) %>%
ggplot(aes(year, batting_avg, color = batsman)) +
geom_line() +
labs(
title = "Batting average between 2013 and 2020",
x = "Year",
y = "Batting Average",
color = "Batsman"
) +
theme_linedraw()
batsman_summary("AB de Villiers")
batsman_summary("AB de Villiers") %>%
ggplot(aes(maximum_runs, strike_rate)) +
geom_point()
batsman_summary("AB de Villiers")
batsman_summary("AB de Villiers") %>%
ggplot(aes(max_runs, strike_rate)) +
geom_point()
map_df(c("AB de Villiers", "V Kohli"), batsman_summary)
library(tidyverse)
map_df(c("AB de Villiers", "V Kohli"), batsman_summary)
map_df(c("AB de Villiers", "V Kohli"), batsman_summary) %>%
ggplot(aes(max_runs, strike_rate)) +
geom_point()
my_df <- map_df(("AB de Villiers", "V Kohli", "MS Dhoni", "KL Rahul"), batsman_summary)
my_df <- map_df(c("AB de Villiers", "V Kohli", "MS Dhoni", "KL Rahul"), batsman_summary)
my_df <- map_df(c("AB de Villiers", "V Kohli", "MS Dhoni", "RG Sharma"), batsman_summary)
ggplot(aes(max_runs, strike_rate), data = my_df) +
geom_point() +
labs(
x = "Maximum Runs",
y = "Strike Rate",
title = "Strike Rate and Maximum Runs"
)
ggplot(aes(max_runs, strike_rate), data = my_df) +
geom_point() +
labs(
x = "Maximum Runs",
y = "Strike Rate",
title = "Strike Rate and Maximum Runs"
) +
theme_linedraw()
View(my_df)
my_lm <- my_df %>%
select(-year) %>%
lm(strike_rate ~ .)
my_df2 <- my_df[, -1]
View(my_df2)
my_lm <- lm(strike_rate ~ ., data = my_df2)
summary(my_lm)
map_df(c("Rahul Sharma", "Harbhajan Singh"), bowling_analysis)
library(ipl)
library(ipl)
library(ipl)
strike_rate("V Kohli", 2016)
library(ipl)
library(ipl)
library(purrr)
library(ipl)
library(ipl)
library(dplyr)
library(ggplot2)
library(purrr)
my_df <- map_df(c("MS Dhoni", "V Kohli", "AB de Villiers"), batsman_summary)
ggplot(aes(max_runs, strike_rate), data = my_df) +
geom_point() +
labs(
x = "Maximum Runs",
y = "Strike Rate",
title = "Strike Rate and Maximum Runs"
) +
theme_linedraw()
my_df2 <- my_df[, -1]
my_lm <- lm(strike_rate ~ ., data = my_df2)
summary(my_lm)
styler:::style_selection()
library(ipl)
library(ipl)
library(dplyr)
library(ggplot2)
library(purrr)
