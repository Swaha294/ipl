rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
styler:::style_selection()
class(deliveries$non_boundary)
unique(deliveries$non_boundary)
## Ball-by-ball information of IPL matches in 2008 - 2020
library(tidyverse)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(
id = as.factor(id),
year = as.numeric(year),
inning = as.factor(inning),
non_boundary = as.factor(non_boundary),
is_wicket = as.factor(is_wicket),
extras_type = as.factor(extras_type),
player_dismissed = as.factor(player_dismissed)
)
usethis::use_data(deliveries, overwrite = TRUE)
## Creating function to create `teams` data set
winning_team <- function(teams, yr) {
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs * 6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(
n_overs - 1, ".",
6 + diff
)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c(
"id", "year", "date",
"batting_team"
))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(
id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA
)
for (i in 1:nrow(team_runs)) {
if (team_runs$date[i] %in% dates) {
team_runs$winning_team[i] <- "No Result"
df <- full_join(df, team_runs[i, ],
by = c(
"id", "year", "date", "batting_team", "match_runs",
"n_overs", "winning_team"
)
)
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i + 1]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i + 1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i]
} else {
team_runs$winning_team[i] <- "Draw"
team_runs$winning_team[i + 1] <- "Draw"
stop("Invalid team name")
}
winloss <- IPL_matches %>%
#' @export
#'
cents_halfcents <- function(player, yr){
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision = NA,
wins = NaN,
losses = NaN,
wpct = NaN
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision,
wins,
losses,
wpct
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
names(deliveries)
library(ipl)
library(moderndive)
library(ipl)
class(teams$id)
library(ipl)
library(ipl)
## Ball-by-ball information of IPL matches in 2008 - 2020
library(tidyverse)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(
year = as.numeric(year),
non_boundary = as.factor(non_boundary),
is_wicket = as.factor(is_wicket),
extras_type = as.factor(extras_type),
player_dismissed = as.factor(player_dismissed)
)
usethis::use_data(deliveries, overwrite = TRUE)
## Creating function to create `teams` data set
winning_team <- function(teams, yr) {
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs * 6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(
n_overs - 1, ".",
6 + diff
)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c(
"id", "year", "date",
"batting_team"
))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(
id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA
)
for (i in 1:nrow(team_runs)) {
if (team_runs$date[i] %in% dates) {
team_runs$winning_team[i] <- "No Result"
df <- full_join(df, team_runs[i, ],
by = c(
"id", "year", "date", "batting_team", "match_runs",
"n_overs", "winning_team"
)
)
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i + 1]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i + 1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i]
} else {
team_runs$winning_team[i] <- "Draw"
team_runs$winning_team[i + 1] <- "Draw"
}
}
team_runs <- team_runs %>%
rbind(df) %>%
filter(!is.na(id)) %>%
arrange(date)
return(team_runs)
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
library(ipl)
class(deliveries$id)
View(deliveries)
## Ball-by-ball information of IPL matches in 2008 - 2020
library(tidyverse)
deliveries <- read_csv("data-raw/ipl.csv") %>%
janitor::clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y")
) %>%
select(id, year, date) %>%
right_join(read_csv("data-raw/deliveries.csv"), by = c("id")) %>%
mutate(
id = as.character(id),
year = as.numeric(year),
inning = as.character(inning),
non_boundary = as.factor(non_boundary),
is_wicket = as.factor(is_wicket),
extras_type = as.factor(extras_type),
player_dismissed = as.factor(player_dismissed)
)
usethis::use_data(deliveries, overwrite = TRUE)
## Creating function to create `teams` data set
winning_team <- function(teams, yr) {
team_runs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year
) %>%
group_by(id, year, date, batting_team) %>%
summarise(match_runs = sum(total_runs)) %>%
mutate(winning_team = NA)
team_overs <- deliveries %>%
filter(
batting_team %in% teams | bowling_team %in% teams,
yr == year,
extras_type %in% c("byes", "legbyes") | is.na(extras_type)
) %>%
arrange(over, ball) %>%
group_by(id, year, date, batting_team) %>%
summarise(
n_balls = n(),
n_overs = length(unique(over)),
diff = n_balls - (n_overs * 6)
) %>%
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(
n_overs - 1, ".",
6 + diff
)), n_overs)) %>%
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss_df <- data.frame(
toss_decision = NA,
wins = NaN,
losses = NaN,
wpct = NaN
)
winloss_df[3, 4] = winloss_df[3, 4]/2
return(winloss_df)
#typeof(winloss_tbl)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
bat_max <- function(player, yr) {
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
filter(
batsman %in% player,
year %in% yr
) %>%
group_by(id, batsman) %>%
summarise(match_runs = sum(batsman_runs)) %>%
ungroup() %>%
group_by(batsman) %>%
summarise(max_runs = max(match_runs))
}
}
bat_max("Suresh Raina", 2017)
bat_max <- function(player, yr) {
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (!is.numeric(yr)) {
stop("Invalid input: year input should be a numeric vector")
} else if (!(player %in% deliveries$batsman)) {
stop(paste0(`player`, "not found!"))
} else if (!(yr %in% deliveries$year)) {
stop(paste0(`yr`, "Year not found"))
} else {
deliveries %>%
filter(
batsman %in% player,
year %in% yr
) %>%
group_by(id, batsman) %>%
summarise(match_runs = sum(batsman_runs)) %>%
ungroup() %>%
group_by(batsman) %>%
summarise(max_runs = max(match_runs))
}
}
bat_max("Suresh Raina", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
typeof(winloss)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
}
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
typeof(winloss)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year (try a year between 2008 and 2020)")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
IPL_matches$date <- as.Date(IPL_matches$date, tryFormats = c("%Y-%m-%d"))
IPL_matches$years <- as.numeric(format(IPL_matches$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year")
} else if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
winloss <- IPL_matches %>%
dplyr::filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
##hi <- winloss("Delhi Daredevils", 2015 )
#typeof(hi)
winloss("Sunrisers Hyderabad", 2017)
# tbl1 <- list(
#   team_name = "Sunrisers Hyderabad",
#   year = 2017,
#   bat = c(2, 0, 1.00),
#   field = c(6, 6, 0.50),
#   total = c(8, 6, 0.75)
# )
#
# tbl1
#tbl2
# test_that("check winloss", {
#   expect_identical(tbl1, winloss("Sunrisers Hyderabad", 2017))
# })
winloss("Sunrisers Hyderabad", 2017)
expect_length(winloss("Sunrisers Hyderabad", 2017), 16)
winloss("Sunrisers Hyderabad", 2017)
expect_length(winloss("Sunrisers Hyderabad", 2017), 4)
stop("Invalid input: team name input should be a character vector")
stop("Invalid input: player input should be a character vector")
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- function(player){
batsman$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", batsman$PLAYER))
'%!in%' <- Negate(`%in%`)
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- batsman %>%
select(PLAYER, `4s`)%>%
dplyr::filter(PLAYER == player)
return(fours[1, 2])
}
fours <- function(player){
batsman$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", batsman$PLAYER))
'%!in%' <- Negate(`%in%`)
if (!is.character(player)) {
stop("Invalid input: player input should be a character vector")
} else if (player %!in% batsman$PLAYER) {
stop("Invalid player name")
}
fours <- batsman %>%
select(PLAYER, `4s`)%>%
dplyr::filter(PLAYER == player)
return(fours[1, 2])
}
fours("Suresh Raina")
test_that("check fours", {
expect_length(fours("Suresh Raina"), 1)
})
test_that("check for invalid input types", {
expect_error(
fours(00),
regexp = "be a character"
)})
test_that("check for when data not found", {
expect_error(
fours("Suresh"),
regexp = "not found"
)})
test_that("check fours", {
expect_length(fours("Suresh Raina"), 1)
})
test_that("check for invalid input types", {
expect_error(
fours(00),
regexp = "be a character"
)})
test_that("check for when data not found", {
expect_error(
fours("Suresh"),
regexp = "Invalid player name"
)})
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
toss_decision_tbl <- IPL_matches %>%
dplyr::filter(
toss_winner == team_name
) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision_tbl)
}
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 4)
})
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (team_name %!in% IPL_matches$team1 | team_name %!in% IPL_matches$team2) {
stop("Invalid team name")
}
toss_decision_tbl <- IPL_matches %>%
dplyr::filter(
toss_winner == team_name
) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision_tbl)
}
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 4)
})
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 2)
})
test_that("check for invalid input types", {
expect_error(
toss_choice(00),
regexp = "be a character"
)
})
test_that("check for when data not found", {
expect_error(
toss_choice("Dehli"),
regexp = "Invalid team name"
)
})
git checkout -b Swaha294-main main
git checkout -b Swaha294-main main
git pull https://github.com/Swaha294/ipl.git main
mutate(n_overs2 = ifelse(diff < 0, as.numeric(paste0(n_overs - 1, ".",
6 + diff)), n_overs)) %>%
ungroup() %>%
select(-c(n_balls, n_overs, diff)) %>%
rename(n_overs = n_overs2)
team_runs <- left_join(team_runs, team_overs, by = c(
"id", "year", "date",
"batting_team"
))
dates <- team_runs %>%
group_by(date) %>%
summarise(N = n()) %>%
filter(N == 1) %>%
.$date
df <- data.frame(
id = NA,
year = NA,
date = NA,
batting_team = NA,
match_runs = NA,
n_overs = NA,
winning_team = NA
)
for (i in 1:nrow(team_runs)) {
if (team_runs$date[i] %in% dates) {
team_runs$winning_team[i] <- "No Result"
df <- full_join(df, team_runs[i, ],
by = c(
"id", "year", "date", "batting_team", "match_runs",
"n_overs", "winning_team"
)
)
team_runs <- team_runs[-i, ]
}
}
for (i in seq(1, nrow(team_runs), 2)) {
if (team_runs$match_runs[i] < team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i + 1]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i + 1]
} else if (team_runs$match_runs[i] > team_runs$match_runs[i + 1]) {
team_runs$winning_team[i] <- team_runs$batting_team[i]
team_runs$winning_team[i + 1] <- team_runs$batting_team[i]
} else {
team_runs$winning_team[i] <- "Draw"
team_runs$winning_team[i + 1] <- "Draw"
}
}
team_runs <- team_runs %>%
rbind(df) %>%
filter(!is.na(id)) %>%
arrange(date)
return(team_runs)
}
## Information on winning team, overs bowled, runs made and wickets fallen for each team in
## each IPL match played in 2008-2020
teams <- map2_df((unique(deliveries$batting_team[deliveries$year == 2008])), 2008, winning_team) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2009])), 2009, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2010])), 2010, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2011])), 2011, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2012])), 2012, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2013])), 2013, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2014])), 2014, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2015])), 2015, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2016])), 2016, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2017])), 2017, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2018])), 2018, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2019])), 2019, winning_team)) %>%
rbind(map2_df((unique(deliveries$batting_team[deliveries$year == 2020])), 2020, winning_team))
teams <- teams %>%
distinct() %>%
ungroup()
usethis::use_data(teams, overwrite = TRUE)
library(ipl)
bat_avg(00, 2016)
expect_error(
bat_avg(00, 2016), regexp = "be a character"
)
bat_avg("V Kohli", 2016)
bat_avg("V Kohli", "2016")
expect_error(
bat_avg("V Kohli", "2016"), regexp = "be a numeric"
)
styler:::style_selection()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
library(ipl)
bat_avg("V Kohli", "2016")
test_that("check for when data not found", {
expect_error(
bat_avg("Kohli", 2016),
regexp = "not found"
)
expect_error(
bat_avg(c("V Kohli", "Dhoni"), regexp = "not found")
)
expect_error(
bat_avg("V Kohli", 200)
)
expect_error(
bat_avg("V Kohli", c(2016, 200017))
)
})
test_that("check for invalid input types", {
expect_error(
bat_avg(00, 2016),
regexp = "be a character"
)
expect_error(
bat_avg("V Kohli", "2016"),
regexp = "be a numeric"
)
})
test_that("check batting avg", {
expect_identical(df, bat_avg("V Kohli", 2016))
expect_identical(df2, bat_avg(c("V Kohli", "MS Dhoni"), 2016:2017))
})
df <- data.frame(
"batsman" = "V Kohli",
year = 2016,
player_runs = 973,
player_wickets = 12,
batting_avg = 81.08
)
df2 <- data.frame(
"batsman" = c("V Kohli", "V Kohli", "MS Dhoni", "MS Dhoni"),
"year" = c(2016, 2017, 2016, 2017),
player_runs = c(973, 308, 284, 290),
player_wickets = c(12, 10, 8, 13),
batting_avg = c(81.08, 30.80, 35.50, 22.31)
)
test_that("check batting avg", {
expect_identical(df, bat_avg("V Kohli", 2016))
expect_identical(df2, bat_avg(c("V Kohli", "MS Dhoni"), 2016:2017))
})
library(ipl)
test_that("check for when data not found", {
expect_error(
bat_max("Kohli", 2016), regexp = "not found"
)
expect_error(
bat_max("V Kohli", 2000)
)
})
test_that("check for invalid input types", {
expect_error(
bat_max(00, 2016), regexp = "be a character"
)
expect_error(
bat_max("V Kohli", "2016"), regexp = "be a numeric"
)
})
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(ipl)
library(ipl)
library(ipl)
styler:::style_selection()
class(deliveries)
library(tidyverse)
library(testthat)
test_that("number of columns in deliveries is correct", {
expect_equal(ncol(deliveries), 20)
})
test_that("number of rows in deliveries is correct", {
expect_equal(nrow(deliveries), 193468)
})
class(deliveries)
test_that("class of deliveries is correct", {
expect_identical(class(deliveries), c("tbl_df", "tbl", "data.frame"))
})
test_that("number of columns of teams is correct", {
expect_equal(ncol(teams), 7)
})
nrow(teams)
test_that("number of rows of teams is correct", {
expect_equal(nrow(teams), 1630)
})
class(teams)
test_that("class of teams is correct", {
expect_identical(class(teams), c("tbl_df", "tbl", "data.frame"))
})
styler:::style_selection()
library(ipl)
library(ipl)

load("~/Desktop/ipl/data/deliveries.rda")
View(deliveries)
load("~/Desktop/ipl/data/teams.rda")
View(teams)
library(readxl)
Top_100_batsman_copy <- read_excel("data-raw/Top_100_batsman copy.xlsx")
View(Top_100_batsman_copy)
library(readxl)
batsman <- read_excel("data-raw/batsman.xlsx")
View(batsman)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
load("~/Desktop/ipl/data/deliveries.rda")
load("/Users/Haley/Desktop/ipl/data/deliveries.rda")
View(deliveries)
View(teams)
View(batsman)

library(readxl)
bowlers <- read_csv("data-raw/bowlers.csv")
bowlers$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", bowlers$PLAYER))
bowlers <- bowlers %>%
janitor::clean_names()
usethis::use_data(bowlers, overwrite = TRUE)
library(ipl)
bowler_score("Rahul Sharma")
overs("Rahul Sharma")
library(ipl)
bowlers_names(30)
library(ipl)
View(bowlers)
library(ipl)
bowler_score("Rahul Sharma")
cents_halfcents("V Kohli", 2016)
expect_equal(154.4, overs("Rahul Sharma"))
expect_equal(154.4, overs("Rahul Sharma"))
context("overs")
library(tibble)
library(dplyr)
library(dplyr)
