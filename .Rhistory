test_that("check for when data not found", {
expect_error(
bowler_score(-10), regexp = "greater than 0"
)
expect_error(
bowler_score(2000125), regexp = "input a lower number"
)
})
test_that("check overs", {
expect_equal(154.4, overs("Rahul Sharma"))
expect_equal(163.3, overs("Siddarth Kaul"))
})
test_that("check for invalid input types", {
expect_error(overs(400), regexp = "Invalid player name, please input another name")
expect_error(overs(41), regexp = "Invalid player name, please input another name")
})
test_that("check for when data not found", {
expect_error(
expect_error(overs("Sharma"), regexp = "Invalid player name, please input another name")
)
expect_error(
expect_error(overs("Rahul"), regexp = "Invalid player name, please input another name")
)
})
overs("Sharma")
test_that("check for when data not found", {
expect_error(
expect_error(overs("Sharma"), regexp = "please input another name")
)
expect_error(
expect_error(overs("Rahul"), regexp = "please input another name")
)
})
test_that("check for when data not found", {
expect_error(
expect_error(overs("Sharma"), regexp = "input another name")
)
expect_error(
expect_error(overs("Rahul"), regexp = "input another name")
)
})
overs("Sharma")
test_that("check for when data not found", {
expect_error(
overs("Sharma"), regexp = "input another name"
)
expect_error(
overs("Rahul"), regexp = "input another name"
)
})
library(ipl)
test_that("check bowler score", {
expect_equal(bowler_score(45), "Tim Southee")
expect_length(bowler_score(40), 4)
})
test_that("check for invalid input types", {
expect_error(bowler_score("Rahul Sharma"), regexp = "be a numeric")
})
bowler_score("Rahul Sharma")
library(ipl)
test_that("check for invalid input types", {
expect_error(bowler_score("Rahul Sharma"), regexp = "be a numeric")
})
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
num = n()
)
return(toss_choice)
}
toss_choice("Mumbai Indians")
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
'%!in%' <- Negate(`%in%`)
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_choice)
}
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!(team_name %in% ipl$team1) | !(team_name %in% ipl$team2)) {
stop("Invalid team name")
} else {toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_choice)
}
}
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!(team_name %in% ipl$team1) | !(team_name %in% ipl$team2)) {
stop("Invalid team name")
} else {toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
}
}
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!(team_name %in% ipl$team1) | !(team_name %in% ipl$team2)) {
stop("Invalid team name")
} else {
toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision)
}
}
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!(team_name %in% ipl$team1) | !(team_name %in% ipl$team2)) {
stop("Invalid team name")
} else {
toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision, year) %>%
summarize(
bat = sum(toss_decision == "bat"),
field = sum(toss_decision == "field")
)
return(toss_decision)
}
}
toss_choice("Mumbai Indians")
library(ipl)
toss_choice("Sunrisers Hyderabad")
length(toss_choice("Sunrisers Hyderabad"))
View(bowlers)
View(bowlers)
library(ipl)
library(ipl)
class(ipl$id)
class(ipl$city)
class(ipl$player_of_match)
class(ipl$venue)
class(ipl$team1)
class(ipl$team2)
class(ipl$toss_winner)
class(ipl$toss_decision)
unique(ipl$toss_decision)
class(ipl$winner)
class(ipl$result)
unique(ipl$result)
unique(ipl$result_margin)
class(ipl$result_margin)
class(ipl$eliminator)
unique(ipl$eliminator)
class(ipl$method)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decison = as.factor(toss_decison)
)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decison = as.factor(toss_decison)
)
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decison = as.factor(toss_decison)
)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decison = as.factor(toss_decision)
)
usethis::use_data(ipl, overwrite = TRUE)
bowlers <- bowlers %>%
clean_names() %>%
rename(
num_100 = x100,
num_50 = x50,
num_4s = x4s,
num_6s = x6s
)
batsman <- batsman %>%
clean_names()%>%
rename(
num_100 = x100,
num_50 = x50,
num_4s = x4s,
num_6s = x6s
)
usethis::use_data(batsman, overwrite = TRUE)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decison = as.factor(toss_decision)
)
usethis::use_data(ipl, overwrite = TRUE)
bowlers <- bowlers %>%
clean_names() %>%
rename(
num_4w = x4w,
num_5w = x5w
)
usethis::use_data(bowlers, overwrite = TRUE)
library(ipl)
names(batsman)
library(ipl)
names(ipl)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
id = as.character(id),
toss_decision = as.factor(toss_decision)
)
usethis::use_data(ipl, overwrite = TRUE)
library(ipl)
names(ipl)
class(ipl$date)
library(ipl)
toss_choice("Mumbai Indians")
#' library(ipl)
#'
#' # The number of times Dehli Daredevils chooses to start batting and fielding
#' toss_choice("Delhi Daredevils")
#'
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @export
#'
toss_choice <- function(team_name){
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!(team_name %in% ipl$team1) | !(team_name %in% ipl$team2)) {
stop("Invalid team name")
} else {
toss_decision <- ipl %>%
filter(
toss_winner == team_name
) %>%
group_by(toss_decision) %>%
summarize(
num = n()
)
return(toss_decision)
}
}
toss_choice("Mumbai Indians")
length(toss_choice("Mumbai Indians"))
test_that("check toss choice", {
expect_length(toss_choice("Sunrisers Hyderabad"), 2)
})
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
test_that("number of columns of datasets is correct", {
expect_equal(ncol(deliveries), 20)
expect_equal(ncol(teams), 7)
expect_equal(ncol(ipl), 17)
expect_equal(ncol(bowlers), 13)
expect_equal(ncol(batsman), 14)
})
nrow(ipl)
nrow(bowlers)
test_that("number of rows of datasets is correct", {
expect_equal(nrow(deliveries), 193468)
expect_equal(nrow(teams), 1630)
expect_equal(nrow(ipl), 816)
expect_equal(nrow(bowlers), 100)
expect_equal(nrow(batsman), 100)
})
class(ipl)
test_that("class of deliveries is correct", {
expect_identical(class(deliveries), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(teams), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(ipl), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(bowlers), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(batsman), c("tbl_df", "tbl", "data.frame"))
})
class(bowlers)
test_that("class of deliveries is correct", {
expect_identical(class(deliveries), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(teams), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(ipl), c("tbl_df", "tbl", "data.frame"))
expect_identical(class(bowlers), c("spec_tbl_df", "tbl_df", "tbl", "data.frame"))
expect_identical(class(batsman), c("spec_tbl_df", "tbl_df", "tbl", "data.frame"))
})
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(ipl)
toss_choice("Mumbai Indians")
styler:::style_selection()
winloss("Mumbai Indians", 2016)
styler:::style_selection()
toss_choice("Sunrisers Hyderabad")
library(ipl)
class(winloss("Mumbai Indians", 2016))
#' @examples
#' library(ipl)
#' # Calculates the wins, losses, and win percentage for Sunrisers Hyderabad in 2017
#' winloss("Sunrisers Hyderabad", 2017)
#'
#' @importFrom magrittr "%>%"
#' @import dplyr
#' @import janitor
#' @export
#'
winloss <- function(team_name, year) {
'%!in%' <- Negate(`%in%`)
ipl$date <- as.Date(ipl$date, tryFormats = c("%Y-%m-%d"))
ipl$years <- as.numeric(format(ipl$date, "%Y"))
if (!is.character(team_name)) {
stop("Invalid input: team name input should be a character vector")
} else if (!is.numeric(year)) {
stop("Invalid input: year input should be a numeric vector")
} else if (year > 2020 | year < 2008) {
stop("Invalid year")
} else if (team_name %!in% ipl$team1 | team_name %!in% ipl$team2) {
stop("Invalid team name")
}
winloss <- ipl %>%
filter(
years == year,
team1 == team_name | team2 == team_name
) %>%
group_by(toss_decision) %>%
summarize(
wins = sum(winner == team_name),
losses = sum(winner != team_name),
wpct = wins / (wins + losses),
.groups = 'drop'
) %>%
adorn_totals("row")
winloss[3, 4] = winloss[3, 4]/2
return(winloss)
}
class(winloss("Mumbai Indians", 2016))
winloss("Mumbai Indians")
class(ipl$date)
# ipl
ipl <- read_csv("data-raw/ipl.csv") %>%
clean_names() %>%
mutate(
date = as.Date(date, "%Y-%m-%d"),
year = format(date, "%Y"),
id = as.character(id),
toss_decision = as.factor(toss_decision)
)
usethis::use_data(ipl, overwrite = TRUE)
library(ipl)
library(ipl)
library(ipl)
df <- tabyl(
toss_decision = c("bat", "field", "Total"),
wins = c(0, 7, 7),
losses = c(2, 5, 7),
wpct = c(0.0, 0.5833333, 0.2916667)
)
class(df) <- c("tabyl", "tbl_df", "tbl", "data.frame")
class(df)
attr(df)
library(ipl)
bowler_score(30)
bowler_score(50)
bowler_score(40)
library(ipl)
library(readxl)
bowlers <- read_excel("~/Desktop/Top_100_bowlers.xlsx")
View(bowlers)
View(bowlers)
## Clean the Bowlers data
bowlers <- read_csv("data-raw/bowlers.csv")
library(tidyverse)
## Clean the Bowlers data
bowlers <- read_csv("data-raw/bowlers.csv")
bowlers$PLAYER <- trimws(gsub("[^[:alnum:]]", " ", bowlers$PLAYER))
bowlers %>%
janitor::clean_names()
bowler_score("Rahul Sharma")
cents_halfcents("V Kohli", 2016)
expect_equal(154.4, overs("Rahul Sharma"))
expect_equal(154.4, overs("Rahul Sharma"))
context("overs")
library(tibble)
library(dplyr)
library(dplyr)
load("/Volumes/GoogleDrive/My Drive/Smith College/Senior Year/ipl/data/bowlers.rda")
bowlers
